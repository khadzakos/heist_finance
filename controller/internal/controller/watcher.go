package controller

import (
	"log"

	"github.com/fsnotify/fsnotify"
)

func WatchConfigFile(path string, updateChan chan struct{}) {
	watcher, err := fsnotify.NewWatcher()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è watcher: %v", err)
	}
	defer watcher.Close()

	err = watcher.Add(path)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ watcher: %v", err)
	}

	log.Println("üîÑ Watcher –∑–∞–ø—É—â–µ–Ω, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ config.yaml")

	for {
		select {
		case event, ok := <-watcher.Events:
			if !ok {
				return
			}

			if event.Op&(fsnotify.Write|fsnotify.Create) != 0 {
				log.Println("üìå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ config.yaml, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã...")
				updateChan <- struct{}{}
			}

		case err, ok := <-watcher.Errors:
			if !ok {
				return
			}
			log.Printf("–û—à–∏–±–∫–∞ watcher: %v\n", err)
		}
	}
}
