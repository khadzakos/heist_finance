package controller

import (
	"context"
	"controller/internal/config"
	"fmt"
	"log"
	"net"
	"sync"
	"time"

	"github.com/docker/docker/api/types/container"
	"github.com/docker/docker/client"
)

var runningConnectors = make(map[string]bool)
var mu sync.Mutex

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Docker
func newDockerClient() (*client.Client, error) {
	return client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
func containerExists(cli *client.Client, name string) (bool, string, error) {
	containers, err := cli.ContainerList(context.Background(), container.ListOptions{All: true})
	if err != nil {
		return false, "", err
	}

	for _, c := range containers {
		for _, containerName := range c.Names {
			if containerName == "/"+name {
				return true, c.ID, nil
			}
		}
	}
	return false, "", nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ RabbitMQ
func waitForRabbitMQ(host string, port string, timeout time.Duration) error {
	deadline := time.Now().Add(timeout)
	for tries := 0; time.Now().Before(deadline); tries++ {
		conn, err := net.DialTimeout("tcp", net.JoinHostPort(host, port), time.Second)
		if err == nil {
			conn.Close()
			log.Printf("‚úÖ RabbitMQ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫\n", tries+1)
			return nil
		}
		time.Sleep(time.Second)
	}
	return fmt.Errorf("timeout waiting for RabbitMQ to become available")
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
func StartService(name, image, network string, env map[string]string) error {
	cli, err := newDockerClient()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Docker: %v\n", err)
		return err
	}
	defer cli.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	exists, containerID, err := containerExists(cli, name)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ %s: %v\n", name, err)
		return err
	}

	if exists {
		log.Printf("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä %s —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º...", name)
		err = cli.ContainerRemove(context.Background(), containerID, container.RemoveOptions{Force: true})
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ %s: %v\n", name, err)
			return err
		}
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	var envVars []string
	for key, value := range env {
		envVars = append(envVars, fmt.Sprintf("%s=%s", key, value))
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	resp, err := cli.ContainerCreate(
		context.Background(),
		&container.Config{
			Image: image,
			Env:   envVars,
		},
		&container.HostConfig{
			NetworkMode: container.NetworkMode(network),
		},
		nil,
		nil,
		name,
	)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ %s: %v\n", name, err)
		return err
	}

	// –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	err = cli.ContainerStart(context.Background(), resp.ID, container.StartOptions{})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ %s: %v\n", name, err)
		return err
	}

	// –ï—Å–ª–∏ —ç—Ç–æ RabbitMQ, –∂–¥–µ–º –ø–æ–∫–∞ –æ–Ω —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
	if name == "rabbitmq" {
		if err := waitForRabbitMQ("rabbitmq", "5672", 60*time.Second); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è RabbitMQ: %v\n", err)
			return err
		}
	}

	log.Printf("‚úÖ –ó–∞–ø—É—â–µ–Ω —Å–µ—Ä–≤–∏—Å: %s\n", name)
	return nil
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
func StopService(name string) error {
	cli, err := newDockerClient()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Docker: %v\n", err)
		return err
	}
	defer cli.Close()

	exists, containerID, err := containerExists(cli, name)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ %s: %v\n", name, err)
		return err
	}

	if !exists {
		log.Printf("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä %s –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É.\n", name)
		return nil
	}

	log.Printf("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ %s...", name)
	if err := cli.ContainerStop(context.Background(), containerID, container.StopOptions{}); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ %s: %v\n", name, err)
		return err
	}

	log.Printf("–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ %s...", name)
	if err := cli.ContainerRemove(context.Background(), containerID, container.RemoveOptions{}); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ %s: %v\n", name, err)
		return err
	}

	log.Printf("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–µ—Ä–≤–∏—Å: %s\n", name)
	return nil
}

// –ó–∞–ø—É—Å–∫ —Å–≤—è–∑–∫–∏ connector + preprocessor
func StartConnectorAndPreprocessor(c config.Connector, p config.Preprocessor, network string) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å RabbitMQ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–∏—Å–æ–≤
	if err := waitForRabbitMQ("rabbitmq", "5672", 30*time.Second); err != nil {
		return fmt.Errorf("RabbitMQ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: %v", err)
	}

	err := StartService(c.Name, c.Image, network, map[string]string{
		"EXCHANGE":     c.Exchange,
		"QUEUE":        c.Queue,
		"RABBITMQ_URL": c.RabbitMQURL,
	})
	if err != nil {
		return err
	}

	err = StartService(p.Name, p.Image, network, map[string]string{
		"QUEUE":        p.Queue,
		"EXCHANGE":     p.Exchange,
		"RABBITMQ_URL": p.RabbitMQURL,
		"DATABASE_URL": p.DatabaseURL,
	})
	if err != nil {
		return err
	}

	return nil
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤—è–∑–∫–∏ connector + preprocessor
func StopConnectorAndPreprocessor(c config.Connector, p config.Preprocessor) error {
	if err := StopService(c.Name); err != nil {
		return err
	}
	if err := StopService(p.Name); err != nil {
		return err
	}
	return nil
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞)
func UpdateServices(newConfig config.Config) {
	mu.Lock()
	defer mu.Unlock()

	current := make(map[string]bool)

	for _, c := range newConfig.Connectors {
		for _, p := range newConfig.Preprocessors {
			if c.Queue == p.Queue { // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ connector <-> preprocessor
				current[c.Name] = true
				if !runningConnectors[c.Name] {
					go StartConnectorAndPreprocessor(c, p, newConfig.Network)
				}
			}
		}
	}

	// TODO: –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥–µ - –ø–æ—á–∏–Ω–∏—Ç—å!
	// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥–µ
	// for name := range runningConnectors {
	// 	if !current[name] {
	// 		go StopService(name)
	// 	}
	// }

	runningConnectors = current
}
